name: "Set up postgres (windows)"
description: "Set up postgres service on windows vm for dbt integration tests"
runs:
  using: "composite"
  steps:
    - shell: pwsh
      run: |
        # Download postgres16
        $url = "https://get.enterprisedb.com/postgresql/postgresql-16.1-1-windows-x64.exe"
        $checkAccess = [System.Net.WebRequest]::Create($url)
        $response = $checkAccess.GetResponse()
        $installerUrl = $response.ResponseUri.OriginalString

        # Invoke Install-Binary function
        $installerArgs = @("--install_runtimes 0", "--superpassword root", "--enable_acledit 1", "--unattendedmodeui none", "--mode unattended")
        Install-Binary `
            -Url $url `
            -InstallArgs $installerArgs `
            -ExpectedSignature (Get-ToolsetContent).postgresql.signature

        # Get Path to pg_ctl.exe
        $pgPath = (Get-CimInstance Win32_Service -Filter "Name LIKE 'postgresql-%'").PathName

        # Parse output of command above to obtain pure path
        $pgBin = Split-Path -Path $pgPath.split('"')[1]
        $pgRoot = Split-Path -Path $pgPath.split('"')[5]
        $pgData = Join-Path $pgRoot "data"

        # Validate PostgreSQL installation
        $pgReadyPath = Join-Path $pgBin "pg_isready.exe"
        $pgReady = Start-Process -FilePath $pgReadyPath -Wait -PassThru
        $exitCode = $pgReady.ExitCode

        if ($exitCode -ne 0) {
            Write-Host -Object "PostgreSQL is not ready. Exitcode: $exitCode"
            exit $exitCode
        }

        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
        $env:Path += ";$env:PGBIN"
        bash ${{ github.action_path }}/setup_db.sh
